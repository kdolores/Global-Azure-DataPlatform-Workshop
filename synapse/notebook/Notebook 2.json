{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "99037532-559f-44d6-8737-79ae827ed0be"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9f93871a-3a02-497b-97a8-191d92b531ef/resourceGroups/rg-lake-operation-prd-001/providers/Microsoft.Synapse/workspaces/synw-lake-prod-eastus-001/bigDataPools/SparkPool",
				"name": "SparkPool",
				"type": "Spark",
				"endpoint": "https://synw-lake-prod-eastus-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" from delta.tables import *\r\n",
					" from pyspark.sql import SparkSession\r\n",
					"source_account_name = 'stlakerdvprdeastus001'\r\n",
					"source_container_name = 'raw'\r\n",
					"source_relative_path = 'city'\r\n",
					"source_linked_service_name = 'adls_stlakerdv_ls'\r\n",
					"\r\n",
					"source_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(source_linked_service_name)\r\n",
					"\r\n",
					"sync_account_name = 'stlakebdvprdeastus001'\r\n",
					"sync_container_name = 'comercial'\r\n",
					"sync_relative_path = 'dimcity'\r\n",
					"sync_linked_service_name = 'adls_stlakebdv_ls'\r\n",
					"\r\n",
					"sync_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(sync_linked_service_name)"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Input Files\r\n",
					"\r\n",
					"path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (source_container_name, source_account_name, source_relative_path)\r\n",
					"\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (source_container_name,source_account_name),source_sas_token)\r\n",
					"  \r\n",
					"print('Remote blob path: ' + path)"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true,
						"source_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"# Load a file into a dataframe\r\n",
					"\r\n",
					"df = spark.read.load(path, format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Output Files\r\n",
					"\r\n",
					"path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (sync_container_name, sync_account_name, sync_relative_path)\r\n",
					"\r\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (sync_container_name,sync_account_name),sync_sas_token)\r\n",
					"  \r\n",
					"print('Remote blob path: ' + path)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save the dataframe as a delta table\r\n",
					"\r\n",
					"\r\n",
					"df.write.format(\"delta\").save('/demo')\r\n",
					"\r\n",
					""
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}